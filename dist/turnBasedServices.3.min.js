"use strict";function resizeMapArea(a){function b(){for(var a=document.getElementById(c),b=document.getElementById(d),g=a.width/e,h=a.height/f,i=b.getElementsByTagName("area"),j=0;j<i.length;j++){var k=i[j],l=k.getAttribute("data-original-coords");l||k.setAttribute("data-original-coords",k.getAttribute("coords"));for(var m=k.getAttribute("data-original-coords").split(","),n=[],o=0;o<m.length;++o){var p=Number(m[o]);n[o]=Math.round(o%2===0?p*g:p*h)}k.setAttribute("coords",n.toString())}}var c=a.imageId,d=a.mapId,e=a.originalWidth,f=a.originalHeight;document.addEventListener("onresize",b),document.addEventListener("orientationchange",b),setInterval(b,1e3)}function createTranslateService(){function a(a,d){if(!c)throw new Error("You must call translate.setLanguagelang: string, codeToL10N: StringDictionary) before requesting translation of translationId="+a);var e=c[a];if(!e)throw new Error("Couldn't find translationId="+a+" in language="+b);return $interpolate(e)(d||{})}if(!angular)throw new Error('You must first include angular: <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.8/angular.min.js"></script>');var b,c,d;return d=a,d.getLanguage=function(){return b},d.setLanguage=function(a,d){b=a,c=d},d}var emulatorServicesCompilationDate="Thu Oct 29 07:51:19 EDT 2015",log;!function(a){function b(){return window.performance?window.performance.now():(new Date).getTime()}function c(a,c){return{millisecondsFromStart:b()-o,args:a,logLevel:c}}function d(a,b){n.length>100&&n.shift(),n.push(c(a,b))}function e(){return m.concat(n)}function f(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];m.push(c(a,l.ALWAYS)),console.info.apply(console,a)}function g(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];d(a,l.INFO),console.info.apply(console,a)}function h(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];d(a,l.DEBUG),console.debug.apply(console,a)}function i(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];d(a,l.WARN),console.warn.apply(console,a)}function j(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];d(a,l.ERROR),console.error.apply(console,a)}function k(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];d(a,l.LOG),console.log.apply(console,a)}var l=function(){function a(){}return a.ALWAYS="ALWAYS",a.LOG="LOG",a.INFO="INFO",a.DEBUG="DEBUG",a.WARN="WARN",a.ERROR="ERROR",a}(),m=[],n=[],o=b();a.getCurrentTime=b,a.getLogs=e,a.alwaysLog=f,a.info=g,a.debug=h,a.warn=i,a.error=j,a.log=k}(log||(log={}));var stateService;!function(a){function b(a){L=a}function c(a){K=a}function d(a){F=a}function e(a){E=a}function f(){x||j("You must call setGame before any other method."),y={},z=null,A={},B=null,C=[],D=0,H=0,I=null,G=0}function g(a){if(Object&&Object.keys)return Object.keys(a);var b=[];for(var c in a)b.push(c);return b}function h(a){return angular.copy(a)}function i(a){return void 0===a||null===a}function j(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];log.error("Throwing an error with these arguments=",a);var c=a.join(", ");throw new Error(c)}function k(a,b){for(var c=[],d=0;d<b.length;d++){var e=b[d];c.push(i(e.set)||i(e.set.visibleToPlayerIndexes)||-1!==e.set.visibleToPlayerIndexes.indexOf(a)?e:{set:{key:e.set.key,value:null,visibleToPlayerIndexes:e.set.visibleToPlayerIndexes}})}return c}function l(a,b,c){if(null===b)return null;for(var d={},e=g(b),f=0;f<e.length;f++){var h=e[f],j=c[h],k=null;(i(j)||j.indexOf(a)>-1)&&(k=b[h]),d[h]=k}return d}function m(a){for(var b=a.slice(0),c=[];b.length>=1;){var d=n(0,b.length),e=b.splice(d,1)[0];c.push(e)}return c}function n(a,b){if(i(a)||i(b)||a>=b)throw new Error("In randomFromTo(from,to), you must have from<to, but from="+a+" to="+b);return Math.floor(Math.random()*(b-a)+a)}function o(a){var b,c;if(i(a.set))if(i(a.setTurn))if(i(a.setRandomInteger))if(i(a.setVisibility))if(i(a["delete"]))if(i(a.shuffle))if(i(a.endMatch))j("Illegal operation, it must contain either set, setRandomInteger, setVisibility, delete, shuffle, or endMatch: "+angular.toJson(a,!0));else{var d=a.endMatch;J++;var e=d.endMatchScores;(i(e)||e.length!==E.length)&&j("Field scores in EndMatch operation must be an array of the same length as the number of players. operation="+angular.toJson(a,!0)),I=e,"onlyAIs"===K&&$timeout(function(){f()},1e3)}else{var g=a.shuffle,k=g.keys;(i(k)||0===k.length)&&j("Field keys in Shuffle operation must be a non empty array. operation="+angular.toJson(a,!0));for(var l=m(k),o=h(y),p=h(A),q=0;q<l.length;q++){var r=k[q],s=l[q];y[s]=o[r],A[s]=p[r]}}else{var t=a["delete"];b=t.key,i(b)&&j("Field key in Delete operation must be non null. operation="+angular.toJson(a,!0)),delete y[b],delete A[b]}else{var u=a.setVisibility;b=u.key,c=u.visibleToPlayerIndexes,i(b)&&j("Fields key in SetVisibility operation must be non null. operation="+angular.toJson(a,!0)),c?A[b]=c:delete A[b]}else{var v=a.setRandomInteger;b=v.key;var w=v.from,x=v.to;(i(b)||i(w)||i(x))&&j("Fields key, from, and to, in SetRandomInteger operation must be non null. operation="+angular.toJson(a,!0));var z=n(w,x);y[b]=z,delete A[b]}else{var B=a.setTurn;H=B.turnIndex,J++}else{var C=a.set;b=C.key,c=C.visibleToPlayerIndexes;var D=C.value;(i(b)||i(D))&&j("Fields key and value in Set operation must be non null. operation="+angular.toJson(a,!0)),y[b]=D,c?A[b]=c:delete A[b]}}function p(){return"playWhite"===K?0:"playBlack"===K?1:"playViewer"===K?-2:"playAgainstTheComputer"===K||"onlyAIs"===K||"passAndPlay"===K?H:Number(K)}function q(){return{turnIndexBeforeMove:D,turnIndex:H,endMatchScores:I,moveNumber:G,randomSeed:F,lastMove:C,lastState:z,currentState:y,lastVisibleTo:B,currentVisibleTo:A}}function r(a){D=a.turnIndexBeforeMove,H=a.turnIndex,I=a.endMatchScores,G=a.moveNumber?a.moveNumber:0,F=a.randomSeed,C=a.lastMove,z=a.lastState,y=a.currentState,B=a.lastVisibleTo,A=a.currentVisibleTo}function s(){var a=k(H,C),b=l(H,z,B),c=l(H,y,A);C.length>0&&x.isMoveOk({move:a,turnIndexBeforeMove:D,turnIndexAfterMove:H,stateBeforeMove:b,stateAfterMove:c,numberOfPlayers:E.length})!==!0&&j("You declared a hacker for a legal move! move="+a),x.updateUI({move:a,turnIndexBeforeMove:D,turnIndexAfterMove:H,stateBeforeMove:b,stateAfterMove:c,numberOfPlayers:E.length,playersInfo:E,yourPlayerIndex:p(),playMode:K,moveNumber:G,randomSeed:F,endMatchScores:I})}function t(){0===L?s():$timeout(function(){s()},L)}function u(a){x||j("You must call setGame before any other method."),-1===H&&j("You cannot send a move after the game ended!"),p()!==H&&j("Expected a move from turnIndex="+H+" but got the move from index="+p()),z=h(y),B=h(A),D=H,H=-1,C=a,G++,F&&Math.seedrandom&&Math.seedrandom(F+G),J=0;for(var b=0;b<a.length;b++){var c=a[b];o(c)}1!==J&&j("We must have either SetTurn or EndMatch, but not both: setTurnOrEndMatchCount="+J),H>=-1&&H<E.length||j("turnIndex must be between -1 and "+E.length+", but it was "+H+"."),t()}function v(a){void 0!==x&&j("You can call setGame only once"),x=a}function w(){return I}var x,y,z,A,B,C,D,E,F,G,H=0,I=null,J=0,K="passAndPlay",L=10;a.setSimulateServerDelayMilliseconds=b,a.setPlayMode=c,a.setRandomSeed=d,a.setPlayers=e,a.initNewMatch=f,a.randomFromTo=n,a.getMatchState=q,a.setMatchState=r,a.sendUpdateUi=t,a.makeMove=u,a.setGame=v,a.getEndMatchScores=w}(stateService||(stateService={}));var messageService;!function(a){function b(a){log.info("Game sent message",a),a.gameUrl=d,window.parent.postMessage(a,"*")}function c(a){window.addEventListener("message",function(b){var c=b.source;if(c===window.parent){var d=b.data;log.info("Game got message",d),$rootScope.$apply(function(){a(d)})}},!1)}var d=location.toString();a.sendMessage=b,a.addMessageListener=c}(messageService||(messageService={}));var gameService;!function(a){function b(a){i=a,f.updateUI(a)}function c(a){if(log.info(["Making move:",a]),!i)throw new Error("Game called makeMove before getting updateUI or it called makeMove more than once for a single updateUI.");var b=i.turnIndexAfterMove>=0&&i.yourPlayerIndex===i.turnIndexAfterMove;if(!b)throw new Error("Game called makeMove when it wasn't your turn: yourPlayerIndex="+i.yourPlayerIndex+" turnIndexAfterMove="+i.turnIndexAfterMove);if(!a||!a.length)throw new Error("Game called makeMove with an empty move="+a);i=null,g?$timeout(function(){stateService.makeMove(a)},100):messageService.sendMessage({makeMove:a})}function d(){for(var a=[],b=stateService.randomFromTo(f.minNumberOfPlayers,f.maxNumberOfPlayers+1),c=0;b>c;c++){var d="onlyAIs"===h||0!==c&&"playAgainstTheComputer"===h?"":""+(c+42);a.push({playerId:d,avatarImageUrl:null,displayName:null})}return a}function e(a){if(f=a,j)throw new Error("You can call setGame exactly once!");j=!0;var c=d();g?(stateService.setGame({updateUI:b,isMoveOk:f.isMoveOk}),stateService.initNewMatch(),stateService.setPlayMode(h),stateService.setPlayers(c),stateService.sendUpdateUi()):(messageService.addMessageListener(function(a){if(a.isMoveOk){var c=f.isMoveOk(a.isMoveOk);c!==!0&&(c={result:c,isMoveOk:a.isMoveOk}),messageService.sendMessage({isMoveOkResult:c})}else a.updateUI?(i=a.updateUI,b(a.updateUI)):a.setLanguage&&(translate.setLanguage(a.setLanguage.language,a.setLanguage.codeToL10N),setTimeout(function(){messageService.sendMessage({setLanguageResult:!0})}))}),messageService.sendMessage({gameReady:{}})),log.info("Passing a 'fake' updateUI message in order to show an empty board to a viewer (so you can NOT perform moves)"),b({move:[],turnIndexBeforeMove:0,turnIndexAfterMove:0,stateBeforeMove:null,stateAfterMove:{},yourPlayerIndex:-2,playersInfo:c,playMode:"passAndPlay",endMatchScores:null,moveNumber:0,randomSeed:"",numberOfPlayers:c.length})}var f,g=window.parent===window||"?test"===window.location.search,h="?onlyAIs"===location.search?"onlyAIs":"?playAgainstTheComputer"===location.search?"playAgainstTheComputer":0===location.search.indexOf("?playMode=")?location.search.substr("?playMode=".length):"passAndPlay",i=null;a.makeMove=c;var j=!1;a.setGame=e}(gameService||(gameService={}));var alphaBetaService;!function(a){function b(a,b,e,f,g,h){if(!a||!e||!f)throw new Error("startingState or getNextStates or getStateScoreForIndex0 is null/undefined");if(0!==b&&1!==b)throw new Error("playerIndex must be either 0 or 1");if(!h.millisecondsLimit&&!h.maxDepth)throw new Error("alphaBetaLimits must have either millisecondsLimit or maxDepth");var i=(new Date).getTime();if(h.maxDepth)return d(a,b,e,f,g,h,i,0,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY).bestState;null!=g&&console.log("Doing iterative-deepeninh (A*) until we run out of time or find a certain win/lose move.");for(var j,k=1;;){null!=g&&console.log("Alpha-beta search until maxDepth="+k);var l=d(a,b,e,f,g,{maxDepth:k,millisecondsLimit:h.millisecondsLimit},i,0,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY),m=l.bestScore,n=l.bestState;if(m===Number.POSITIVE_INFINITY||m===Number.NEGATIVE_INFINITY){var o=m===(0===b?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY);return console.log("Discovered that AI is going to "+(o?"win":"lose")+" with maxDepth="+k),null!=g&&console.log("Best state is "+g(n)),n}var p=c({millisecondsLimit:h.millisecondsLimit/2},i),q=c(h,i);if(p||q){var r=q&&1!==k?j:n;return console.log(q?"Run out of time when maxDepth="+k+", so returning the best state for maxDepth="+(1===k?1:k-1):"Run out of half the time when maxDepth="+k+", so no point of exploring the next depth."),null!=g&&console.log("Best state is "+g(r)),r}j=n,k++}}function c(a,b){return a.millisecondsLimit&&(new Date).getTime()-b>a.millisecondsLimit}function d(a,b,e,f,g,h,i,j,k,l){var m=null,n=null;if(c(h,i))return null!=g&&console.log("Run out of time, just quitting from this traversal."),{bestScore:0,bestState:null};if(j===h.maxDepth)return m=f(a,b),null!=g&&console.log("Max depth reached, score is "+m),{bestScore:m,bestState:null};var o=e(a,b);if(null!=g&&console.log(g(a)+" has "+o.length+" next states"),0===o.length)return m=f(a,b),null!=g&&console.log("Terminal state, score is "+m),{bestScore:m,bestState:null};for(var p=0;p<o.length;p++){var q=o[p],r=d(q,1-b,e,f,g,h,i,j+1,k,l).bestScore;if(null!=g&&console.log("Score of "+g(q)+" is "+r),(null===m||0===b&&r>m||1===b&&m>r)&&(m=r,n=q),0===b){if(m>=l)return{bestScore:m,bestState:n};k=Math.max(k,m)}else{if(k>=m)return{bestScore:m,bestState:n};l=Math.min(l,m)}}return null!=g&&console.log("Best next state for playerIndex "+b+" is "+g(n)+" with score of "+m),{bestScore:m,bestState:n}}a.alphaBetaDecision=b}(alphaBetaService||(alphaBetaService={}));var resizeGameAreaService;!function(a){function b(a){if(f=a,e=h.getElementById("gameArea"),!e)throw new Error("You forgot to add to your <body> this div: <div id='gameArea'>...</div>");g=null,d()}function c(a){return Math.round(100*a)/100}function d(){if(null!==f){var a=window.innerWidth,b=window.innerHeight,d=a,h=b;if(null===g||g.windowWidth!==d||g.windowHeight!==h){if(g={windowWidth:d,windowHeight:h},0===d||0===h)return log.info("Window width/height is 0 so hiding gameArea div."),void(e.style.display="none");e.style.display="block";var i=d/h;i>f?d=c(h*f):h=c(d/f),log.info("Window size is "+g.windowWidth+"x"+g.windowHeight+" so setting gameArea size to "+d+"x"+h+" because widthToHeight="+f);var j=.95;d*=j,h*=j,e.style.width=d+"px",e.style.height=h+"px",e.style.position="absolute",e.style.left=(a-d)/2+"px",e.style.top=(b-h)/2+"px"}}}var e,f=null,g=null,h=window.document;a.setWidthToHeight=b,h.addEventListener("onresize",d),h.addEventListener("orientationchange",d),setInterval(d,1e3)}(resizeGameAreaService||(resizeGameAreaService={}));var translate=createTranslateService();angular.module("translate",[]).filter("translate",["$parse",function(a){var b=function(b,c){return angular.isObject(c)||(c=a(c)(this)),translate(b,c)};return b.$stateful=!0,b}]);var dragAndDropService;!function(a){function b(a,b){function c(a){var b=a.changedTouches[0];g(a,a.type,b.clientX,b.clientY)}function d(a){h=!0,g(a,"touchstart",a.clientX,a.clientY)}function e(a){h&&g(a,"touchmove",a.clientX,a.clientY)}function f(a){h=!1,g(a,"touchend",a.clientX,a.clientY)}function g(a,c,d,e){a.preventDefault&&a.preventDefault(),a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0,a.returnValue=!1,console.log("handleDragEvent:",c,d,e),b(c,d,e,a)}if(!a||!b)throw new Error("When calling addDragListener(touchElementId, handleDragEvent), you must pass two parameters");var h=!1,i=document.getElementById(a);if(!i)throw new Error("You must have <div id='"+a+"'>...</div>");i.addEventListener("touchstart",c,!0),i.addEventListener("touchmove",c,!0),i.addEventListener("touchend",c,!0),i.addEventListener("touchcancel",c,!0),i.addEventListener("touchleave",c,!0),i.addEventListener("mousedown",d,!0),i.addEventListener("mousemove",e,!0),i.addEventListener("mouseup",f,!0)}a.addDragListener=b}(dragAndDropService||(dragAndDropService={}));var $rootScope,$location,$timeout,$interval,$interpolate;angular.module("gameServices",["translate"]).run(["$location","$rootScope","$timeout","$interval","$interpolate",function(a,b,c,d,e){$location=a,$rootScope=b,$timeout=c,$interval=d,$interpolate=e,console.log("Finished init of gameServices")}]).factory("$exceptionHandler",function(){function a(a,b){var c={gameUrl:""+window.location,exception:""+a,stack:""+(a?a.stack:"no stack"),cause:b,gameLogs:log.getLogs()};console.error("Game had an exception:\n",c),window.alert("Game had an unexpected error. If you know JavaScript, you can look at the console and try to debug it :)");var d=angular.fromJson(angular.toJson(c));window.parent.postMessage({emailJavaScriptError:d},"*")}return window.onerror=function(b,c,d,e,f){a(f,"Error: "+b+" Script: "+c+" Line: "+d+" Column: "+e)},a});
//# sourceMappingURL=turnBasedServices.3.min.js.map